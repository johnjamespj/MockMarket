[{"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\index.tsx":"1","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\reportWebVitals.ts":"2","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\index.ts":"3","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\app.tsx":"4","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\root.tsx":"5","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\scaffolding.tsx":"6","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\quote\\quote_page_tester.tsx":"7","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\appbar.tsx":"8","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\quote\\graph_groups.tsx":"9","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\theme\\index.ts":"10","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\config.ts":"11","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\drawer\\index.ts":"12","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\helpers\\joinClass.ts":"13","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\theme\\globalTheme.ts":"14","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\notifications.tsx":"15","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\more_info_prompt.tsx":"16","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\drawer\\drawer.tsx":"17","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\graphs\\spark.tsx":"18","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\theme\\size.ts":"19","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\theme\\palette.ts":"20","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\theme\\typography.ts":"21","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\drawer\\navrail_drawer.tsx":"22","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\drawer\\nav_drawer.tsx":"23","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\drawer\\rail_item.tsx":"24","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\drawer\\navlist_item.tsx":"25","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\dialog\\index.ts":"26","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\dialog\\dialog_title.tsx":"27","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\dialog\\dialog.tsx":"28","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\stories\\Page.stories.tsx":"29","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\stories\\Header.stories.tsx":"30","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\stories\\Button.stories.tsx":"31","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\stories\\Button.tsx":"32","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\stories\\Header.tsx":"33","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\stories\\Page.tsx":"34"},{"size":440,"mtime":1609025406228,"results":"35","hashOfConfig":"36"},{"size":416,"mtime":1609000110334,"results":"37","hashOfConfig":"36"},{"size":45,"mtime":1608912390545,"results":"38","hashOfConfig":"36"},{"size":327,"mtime":1610162054599,"results":"39","hashOfConfig":"36"},{"size":377,"mtime":1608956594264,"results":"40","hashOfConfig":"36"},{"size":2480,"mtime":1609132147937,"results":"41","hashOfConfig":"36"},{"size":1228,"mtime":1609300958618,"results":"42","hashOfConfig":"36"},{"size":5903,"mtime":1609000108142,"results":"43","hashOfConfig":"36"},{"size":3537,"mtime":1609316443122,"results":"44","hashOfConfig":"36"},{"size":31,"mtime":1608869546126,"results":"45","hashOfConfig":"36"},{"size":125,"mtime":1609131981401,"results":"46","hashOfConfig":"36"},{"size":24,"mtime":1608953687365,"results":"47","hashOfConfig":"36"},{"size":242,"mtime":1608955453128,"results":"48","hashOfConfig":"36"},{"size":317,"mtime":1608926814106,"results":"49","hashOfConfig":"36"},{"size":1162,"mtime":1609000114157,"results":"50","hashOfConfig":"36"},{"size":1329,"mtime":1609000112906,"results":"51","hashOfConfig":"36"},{"size":2735,"mtime":1609000115561,"results":"52","hashOfConfig":"36"},{"size":12712,"mtime":1609319835946,"results":"53","hashOfConfig":"36"},{"size":179,"mtime":1608869439764,"results":"54","hashOfConfig":"36"},{"size":1486,"mtime":1609000130892,"results":"55","hashOfConfig":"36"},{"size":592,"mtime":1609000132630,"results":"56","hashOfConfig":"36"},{"size":1642,"mtime":1609000119187,"results":"57","hashOfConfig":"36"},{"size":2576,"mtime":1609000075569,"results":"58","hashOfConfig":"36"},{"size":1895,"mtime":1609000120433,"results":"59","hashOfConfig":"36"},{"size":844,"mtime":1609000117601,"results":"60","hashOfConfig":"36"},{"size":56,"mtime":1608995596307,"results":"61","hashOfConfig":"36"},{"size":1047,"mtime":1609000123415,"results":"62","hashOfConfig":"36"},{"size":802,"mtime":1609000125119,"results":"63","hashOfConfig":"36"},{"size":605,"mtime":499162500000,"results":"64","hashOfConfig":"36"},{"size":510,"mtime":499162500000,"results":"65","hashOfConfig":"36"},{"size":804,"mtime":499162500000,"results":"66","hashOfConfig":"36"},{"size":941,"mtime":499162500000,"results":"67","hashOfConfig":"36"},{"size":1356,"mtime":499162500000,"results":"68","hashOfConfig":"36"},{"size":2415,"mtime":499162500000,"results":"69","hashOfConfig":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"7z9d4b",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"72"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"72"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"128"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\index.tsx",[],["143","144"],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\reportWebVitals.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\index.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\app.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\root.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\scaffolding.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\quote\\quote_page_tester.tsx",["145"],"import { useState } from \"react\";\r\nimport { GraphGroups, ValidInterval, ValidRange } from \"./graph_groups\";\r\nimport sample from './quote-sample.json';\r\n\r\ninterface SampleChartGroupData {\r\n    previousClose: number;\r\n    openData: number[];\r\n    timestamps: number[];\r\n    selectedRange: ValidRange;\r\n}\r\n\r\nfunction getSampleData(x: ValidRange) {\r\n    return {\r\n        timestamps: sample.chart[x].timestamp,\r\n        openData: sample.chart[x].indicators.quote[0].open,\r\n        previousClose: sample.chart[x].meta.chartPreviousClose,\r\n        selectedRange: x,\r\n    }\r\n}\r\n\r\nfunction GraphGroupsTest() {\r\n    const [chartData, setChartData] = useState<SampleChartGroupData>(getSampleData('1d'))\r\n\r\n    return <GraphGroups\r\n        validRanges={[\r\n            \"1d\",\r\n            \"5d\",\r\n            \"1mo\",\r\n            \"6mo\",\r\n            \"1y\",\r\n            \"10y\",\r\n            \"ytd\",\r\n            \"max\"\r\n        ]}\r\n        onRangeChange={(x) => setChartData(getSampleData(x))}\r\n        selectedRange={chartData.selectedRange}\r\n        previousClose={chartData.previousClose}\r\n        openData={chartData.openData}\r\n        timestamps={chartData.timestamps}\r\n    />\r\n}\r\n\r\nexport function Test() {\r\n    return <GraphGroupsTest />\r\n}","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\appbar.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\quote\\graph_groups.tsx",["146"],"import { Button, ButtonGroup, createStyles, makeStyles, Theme, withStyles, Card } from \"@material-ui/core\"\r\nimport { SparkGraph } from 'components/app/graphs/spark'\r\nimport React from \"react\";\r\n\r\nexport type ValidRange =\r\n    | \"1d\"\r\n    | \"5d\"\r\n    | \"1mo\"\r\n    | \"3mo\"\r\n    | \"6mo\"\r\n    | \"1y\"\r\n    | \"2y\"\r\n    | \"5y\"\r\n    | \"10y\"\r\n    | \"ytd\"\r\n    | \"max\"\r\n\r\nexport type ValidInterval =\r\n    | \"1m\"\r\n    | \"2m\"\r\n    | \"5m\"\r\n    | \"15m\"\r\n    | \"30m\"\r\n    | \"60m\"\r\n    | \"90m\"\r\n    | \"1h\"\r\n    | \"1d\"\r\n    | \"5d\"\r\n    | \"1wk\"\r\n    | \"1mo\"\r\n    | \"3mo\"\r\n\r\ntype IntervalRangeMap = { [P in ValidRange]: ValidInterval; };\r\n\r\nexport const intervalRangeMap: IntervalRangeMap = {\r\n    \"1d\": \"5m\",\r\n    \"5d\": \"15m\",\r\n    \"1mo\": \"1d\",\r\n    \"3mo\": \"1d\",\r\n    \"6mo\": \"5d\",\r\n    \"1y\": \"1wk\",\r\n    \"2y\": \"1mo\",\r\n    \"5y\": \"3mo\",\r\n    \"10y\": \"3mo\",\r\n    \"ytd\": \"1d\",\r\n    \"max\": \"1mo\"\r\n}\r\n\r\nexport interface GraphGroupsProps {\r\n    validRanges: ValidRange[];\r\n    selectedRange: ValidRange;\r\n\r\n    onRangeChange: (newRange: ValidRange) => void;\r\n    openData: number[];\r\n    timestamps: number[];\r\n    previousClose: number;\r\n}\r\n\r\nconst width = 350\r\nconst height = 140\r\nconst radius = 2\r\nexport const useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            gap: 10,\r\n            width: width + 4 * radius + theme.spacing(1) * 4,\r\n            padding: theme.spacing(1)\r\n        },\r\n        graph: {\r\n            padding: theme.spacing(1)\r\n        },\r\n        buttons: {\r\n            alignSelf: 'center'\r\n        }\r\n    }),\r\n)\r\n\r\nconst StyledButton = withStyles((theme: Theme) => ({\r\n    label: {\r\n        fontSize: theme.typography.overline.fontSize\r\n    }\r\n}))(Button)\r\n\r\nconst SECONDS_IN_DAY = 86400\r\n\r\nconst seconds_in_year = (year: number) => (new Date(year, 11, 31, 23, 59, 59).getTime() - new Date(year, 0).getTime()) / 1000\r\n\r\n/**\r\n * Graph Group for stock quotes\r\n * \r\n * 1d => 5m, \r\n * 5d => 15m, \r\n * 1mo => 1d, \r\n * 3mo => 1d,\r\n * 6mo => 5d,\r\n * 1y => 1wk,\r\n * 2y => 1mo,\r\n * 5y => 3mo,\r\n * 10y => 3mo,\r\n * ytd => 1d,\r\n * max => 1mo\r\n */\r\nexport function GraphGroups({\r\n    validRanges,\r\n    selectedRange,\r\n    previousClose,\r\n    onRangeChange,\r\n    openData,\r\n    timestamps\r\n}: GraphGroupsProps) {\r\n    const classes = useStyles();\r\n    let range: [number, number] = [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER]\r\n\r\n    if (selectedRange === '1d')\r\n        range = [timestamps[0], timestamps[0] + SECONDS_IN_DAY]\r\n    else if (selectedRange === 'ytd')\r\n        range = [timestamps[0], timestamps[0] + seconds_in_year(new Date(timestamps[0]).getFullYear())]\r\n\r\n    return <div className={classes.root}>\r\n        <div className={classes.graph}>\r\n            <SparkGraph\r\n                close={previousClose}\r\n                timestamp={timestamps}\r\n                data={openData}\r\n                height={height}\r\n                width={width}\r\n                pointerRadius={radius}\r\n                range={range}\r\n            />\r\n        </div>\r\n        <div className={classes.buttons}>\r\n            <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\" className={classes.buttons}>\r\n                {validRanges.map(x =>\r\n                    <StyledButton size=\"small\" variant={x === selectedRange ? \"contained\" : \"outlined\"} onClick={() => onRangeChange(x)}>\r\n                        {x}\r\n                    </StyledButton>\r\n                )}\r\n            </ButtonGroup>\r\n        </div>\r\n    </div>\r\n}\r\n","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\theme\\index.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\config.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\drawer\\index.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\helpers\\joinClass.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\theme\\globalTheme.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\notifications.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\more_info_prompt.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\drawer\\drawer.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\graphs\\spark.tsx",["147","148","149","150","151","152","153","154","155","156"],"import { createStyles, makeStyles, withStyles } from '@material-ui/core';\r\nimport { useEffect, useMemo, useRef, useState } from 'react';\r\nimport sample from './spark-sample.json'\r\n\r\ninterface GraphProps {\r\n    timestamp: number[];\r\n    data: number[];\r\n\r\n    width: number;\r\n    height: number;\r\n\r\n    range?: [start: number, end: number]\r\n}\r\n\r\ninterface SparkGraphBaseProps extends GraphProps {\r\n    close: number;\r\n    strokeWidth?: number;\r\n    pointerRadius?: number;\r\n}\r\n\r\ninterface SparkGraphProps extends SparkGraphBaseProps {\r\n    onFocus?: (dataPoint: DataPoint | null) => void;\r\n}\r\n\r\ntype SparkGraphMiniProps = SparkGraphBaseProps;\r\n\r\ninterface DataPoint {\r\n    point: Point;\r\n    timestamp: number;\r\n    dataPoint: number;\r\n}\r\n\r\ninterface SectionData {\r\n    type: 'red' | 'green';\r\n    start: Point;\r\n    end: Point;\r\n    data: DataPoint[];\r\n}\r\n\r\ntype Point = [x: number, y: number];\r\n\r\nfunction arrayMin(arr: number[]) {\r\n    return arr.reduce(function (p, v) {\r\n        return (p < v ? p : v);\r\n    });\r\n}\r\n\r\nfunction arrayMax(arr: number[]) {\r\n    return arr.reduce(function (p, v) {\r\n        return (p > v ? p : v);\r\n    });\r\n}\r\n\r\ninterface Size {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\ninterface SparkGraphHookData {\r\n    yClose: number;\r\n    calculatedLineData: SectionData[];\r\n    size: Size;\r\n}\r\n\r\ninterface SparkGraphHookParams extends SparkGraphMiniProps {\r\n    padding?: number;\r\n}\r\n\r\nfunction useSparkGraph({\r\n    close,\r\n    data,\r\n    timestamp,\r\n    width,\r\n    height,\r\n    range = [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER],\r\n    padding = 5\r\n}: SparkGraphHookParams): SparkGraphHookData {\r\n    if (timestamp.length !== data.length)\r\n        throw new Error(\"Timestamp array length should be equal to data point array\")\r\n\r\n    let xMin = Math.min(timestamp[0], range[0])\r\n    let xMax = Math.max(timestamp[timestamp.length - 1], range[1])\r\n    let xFactor = width / (xMax - xMin)\r\n\r\n    let yMin = arrayMin(data)\r\n    let yMax = arrayMax(data)\r\n    let yFactor = height / (yMax - yMin)\r\n\r\n    const transform = (x: number, y: number): Point => [\r\n        (x - xMin) * xFactor + padding / 2,\r\n        height - ((y - yMin) * yFactor) + padding / 2\r\n    ]\r\n\r\n    const yClose = useMemo(() => transform(0, close)[1], [\r\n        close,\r\n        data,\r\n        timestamp,\r\n        width,\r\n        height,\r\n        range\r\n    ])\r\n\r\n    const calculateIntersection = (a: Point, b: Point): Point => {\r\n        const slope = (a[1] - b[1]) / (a[0] - b[0])\r\n        return [\r\n            (yClose - a[1] + slope * a[0]) / slope,\r\n            yClose\r\n        ]\r\n    }\r\n\r\n    const calculatedLineData = useMemo<SectionData[]>(() => {\r\n        const sections: SectionData[] = []\r\n\r\n        const dataPoints: DataPoint[] = data.map<DataPoint>((x, i) => ({\r\n            timestamp: timestamp[i],\r\n            dataPoint: data[i],\r\n            point: transform(timestamp[i], data[i]),\r\n        }))\r\n\r\n        const seperatedDataPoints: DataPoint[][] = [];\r\n\r\n        dataPoints.forEach(x => {\r\n            const length = seperatedDataPoints.length\r\n            if (length !== 0 && ((seperatedDataPoints[length - 1][0].dataPoint >= close\r\n                && x.dataPoint >= close)\r\n                || (seperatedDataPoints[length - 1][0].dataPoint < close\r\n                    && x.dataPoint < close)))\r\n                seperatedDataPoints[length - 1].push(x)\r\n            else\r\n                seperatedDataPoints.push([x])\r\n        })\r\n\r\n        seperatedDataPoints.forEach((x, i) => sections.push({\r\n            type: x[0].dataPoint >= close ? 'green' : 'red',\r\n            data: x,\r\n            start: i === 0 ? x[0].point : sections[i - 1].end,\r\n            end: i !== seperatedDataPoints.length - 1\r\n                ? calculateIntersection(x[x.length - 1].point, seperatedDataPoints[i + 1][0].point)\r\n                : x[x.length - 1].point\r\n        }))\r\n\r\n        return sections\r\n    }, [close,\r\n        data,\r\n        timestamp,\r\n        width,\r\n        height,\r\n        range])\r\n\r\n    return {\r\n        yClose,\r\n        calculatedLineData,\r\n        size: {\r\n            height: height + padding * 2,\r\n            width: width + padding * 2\r\n        }\r\n    }\r\n}\r\n\r\nexport function SparkGraphMini({\r\n    close,\r\n    data,\r\n    timestamp,\r\n    width,\r\n    height,\r\n    range = [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER],\r\n    strokeWidth = 0.5,\r\n    pointerRadius = 3\r\n}: SparkGraphMiniProps) {\r\n    const ref = useRef<HTMLCanvasElement | null>(null)\r\n\r\n    const {\r\n        calculatedLineData,\r\n        yClose,\r\n        size\r\n    } = useSparkGraph({\r\n        close,\r\n        data,\r\n        timestamp,\r\n        width,\r\n        height,\r\n        range,\r\n        padding: pointerRadius * 2\r\n    });\r\n\r\n    const render = (ctx: CanvasRenderingContext2D) => {\r\n        ctx.lineWidth = strokeWidth\r\n        calculatedLineData.forEach((x, i) => {\r\n            ctx.strokeStyle = x.type\r\n            ctx.beginPath()\r\n            ctx.moveTo(...x.start)\r\n            x.data.forEach(data => ctx.lineTo(...data.point))\r\n            ctx.lineTo(...x.end)\r\n            ctx.stroke()\r\n\r\n            if (i === 0)\r\n                ctx.lineTo(x.start[0], yClose)\r\n\r\n            if (i === calculatedLineData.length - 1)\r\n                ctx.lineTo(x.end[0], yClose)\r\n\r\n            var gradient;\r\n            if (x.type === 'green') {\r\n                gradient = ctx.createLinearGradient(0, 0, 0, yClose);\r\n                gradient.addColorStop(0, \"rgba(0, 255, 0, 0.5)\");\r\n                gradient.addColorStop(1, \"white\");\r\n            } else {\r\n                gradient = ctx.createLinearGradient(0, yClose, size.height, 0);\r\n                gradient.addColorStop(0, \"white\");\r\n                gradient.addColorStop(1, \"rgba(255, 0, 0, 0.5)\");\r\n            }\r\n\r\n            ctx.fillStyle = gradient\r\n            ctx.closePath()\r\n            ctx.fill()\r\n        })\r\n\r\n        let dataArray = calculatedLineData[calculatedLineData.length - 1].data\r\n\r\n        const renderCircle = ({ point, dataPoint }: DataPoint) => {\r\n            ctx.beginPath();\r\n            ctx.fillStyle = dataPoint >= close ? 'green' : 'red'\r\n            ctx.arc(...point, pointerRadius, 0, 2 * Math.PI);\r\n            ctx.fill();\r\n        }\r\n\r\n        renderCircle(dataArray[dataArray.length - 1])\r\n    }\r\n\r\n    const renderCloseLine = (ctx: CanvasRenderingContext2D) => {\r\n        ctx.beginPath()\r\n        ctx.strokeStyle = 'black'\r\n        ctx.setLineDash([5, 5]);\r\n        ctx.moveTo(0, yClose)\r\n        ctx.lineTo(size.width, yClose)\r\n        ctx.stroke()\r\n\r\n        // unset values\r\n        ctx.setLineDash([0, 0])\r\n    }\r\n\r\n    const clear = (ctx: CanvasRenderingContext2D) => ctx.clearRect(0, 0, size.width, size.height)\r\n\r\n    useEffect(() => {\r\n        const ctx = ref?.current?.getContext('2d');\r\n\r\n        if (ctx) {\r\n            clear(ctx)\r\n            render(ctx)\r\n            renderCloseLine(ctx)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <canvas\r\n            ref={ref}\r\n            width={size.width}\r\n            height={size.height}\r\n        />\r\n    )\r\n}\r\n\r\nconst radius = 6\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        circle: {\r\n            borderRadius: '100%',\r\n            position: 'absolute',\r\n            width: radius,\r\n            height: radius\r\n        },\r\n        root: {\r\n            position: 'relative'\r\n        },\r\n        canvasGraphLayers: {\r\n            position: 'absolute',\r\n            top: 0,\r\n            left: 0\r\n        },\r\n    }),\r\n)\r\n\r\nexport function SparkGraph({\r\n    close,\r\n    data,\r\n    timestamp,\r\n    width,\r\n    height,\r\n    onFocus = () => { },\r\n    range = [Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER],\r\n    strokeWidth = 1,\r\n    pointerRadius = 3,\r\n}: SparkGraphProps) {\r\n    const graphLayerRef = useRef<HTMLCanvasElement | null>(null)\r\n    const graphLayerPointerRef = useRef<HTMLCanvasElement | null>(null)\r\n\r\n    const [posIndex, setPosIndex] = useState<number>(-1)\r\n    const classes = useStyles()\r\n\r\n    const {\r\n        calculatedLineData,\r\n        yClose,\r\n        size\r\n    } = useSparkGraph({\r\n        close,\r\n        data,\r\n        timestamp,\r\n        width,\r\n        height,\r\n        range,\r\n        padding: pointerRadius * 2\r\n    });\r\n\r\n    const pointArry = useMemo(() => {\r\n        const ary: [number, DataPoint][] = []\r\n        calculatedLineData.forEach(x => {\r\n            x.data.forEach(x => {\r\n                ary.push([x.point[0], x])\r\n            })\r\n        })\r\n        return ary\r\n    }, [calculatedLineData])\r\n\r\n    const findTheClosest = (goal = 0, arry = pointArry) => {\r\n        const point = arry.reduce(function (prev, curr) {\r\n            return (Math.abs(curr[0] - goal) < Math.abs(prev[0] - goal) ? curr : prev);\r\n        })\r\n        return arry.findIndex(x => point[1].dataPoint === x[1].dataPoint)\r\n    }\r\n\r\n    const renderCircle = (ctx: CanvasRenderingContext2D, { point, dataPoint }: DataPoint): void => {\r\n        ctx.beginPath();\r\n        ctx.fillStyle = dataPoint >= close ? 'green' : 'red'\r\n        ctx.arc(...point, pointerRadius, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n    }\r\n\r\n    const render = (ctx: CanvasRenderingContext2D) => {\r\n        ctx.lineWidth = strokeWidth\r\n        calculatedLineData.forEach((x, i) => {\r\n            ctx.strokeStyle = x.type\r\n            ctx.beginPath()\r\n            ctx.moveTo(...x.start)\r\n            x.data.forEach(data => ctx.lineTo(...data.point))\r\n            ctx.lineTo(...x.end)\r\n            ctx.stroke()\r\n        })\r\n\r\n        ctx.lineWidth = strokeWidth\r\n        ctx.beginPath()\r\n        ctx.strokeStyle = 'black'\r\n        ctx.setLineDash([5, 5]);\r\n        ctx.moveTo(0, yClose)\r\n        ctx.lineTo(size.width, yClose)\r\n        ctx.stroke()\r\n\r\n        // unset values\r\n        ctx.setLineDash([0, 0])\r\n\r\n        //render end pointer\r\n        renderCircle(ctx, pointArry[pointArry.length - 1][1])\r\n    }\r\n\r\n    function getMousePos(e: React.PointerEvent<HTMLCanvasElement>) {\r\n        var rect = graphLayerRef?.current?.getBoundingClientRect()\r\n\r\n        if (rect)\r\n            return {\r\n                x: e.clientX - rect.left,\r\n                y: e.clientY - rect.top\r\n            };\r\n        return { x: 0, y: 0 }\r\n    }\r\n\r\n    const handlePointerMove = (e: React.PointerEvent<HTMLCanvasElement>) => {\r\n        setPosIndex(findTheClosest(getMousePos(e).x))\r\n    }\r\n\r\n    const clear = (ctx: CanvasRenderingContext2D) => ctx.clearRect(0, 0, size.width, size.height)\r\n\r\n    useEffect(() => {\r\n        const ctx = graphLayerRef?.current?.getContext('2d');\r\n\r\n        if (ctx) {\r\n            clear(ctx)\r\n            render(ctx)\r\n        }\r\n    }, [calculatedLineData])\r\n\r\n    useEffect(() => {\r\n        if (posIndex !== -1)\r\n            onFocus(pointArry[posIndex][1])\r\n        else\r\n            onFocus(null)\r\n    }, [posIndex])\r\n\r\n    const renderPointer = (ctx: CanvasRenderingContext2D, pointIndex: number) => {\r\n        if (pointIndex !== -1)\r\n            renderCircle(ctx, pointArry[pointIndex][1]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const ctx = graphLayerPointerRef?.current?.getContext('2d')\r\n\r\n        if (ctx) {\r\n            clear(ctx)\r\n            renderPointer(ctx, posIndex)\r\n        }\r\n    }, [posIndex])\r\n\r\n    return (\r\n        <div className={classes.root} style={{\r\n            width: size.width,\r\n            height: size.height\r\n        }}>\r\n            <canvas\r\n                ref={graphLayerRef}\r\n                width={size.width}\r\n                height={size.height}\r\n                className={classes.canvasGraphLayers}\r\n            />\r\n            <canvas\r\n                ref={graphLayerPointerRef}\r\n                width={size.width}\r\n                height={size.height}\r\n                className={classes.canvasGraphLayers}\r\n            />\r\n            <canvas\r\n                width={size.width}\r\n                height={size.height}\r\n                className={classes.canvasGraphLayers}\r\n                onPointerMove={handlePointerMove}\r\n                onPointerLeave={() => setPosIndex(-1)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction fixNumber(num: number) {\r\n    return Math.round(num * 100) / 100\r\n}\r\n\r\nexport function SparkGraphTest() {\r\n    const [pointData, setPointData] = useState<DataPoint | null>(null)\r\n\r\n    const close = sample.meta.chartPreviousClose;\r\n    const timestamp = sample.timestamp;\r\n    const data = sample.indicators.quote[0].open.map(x => x === null ? close : x);\r\n    const currentPrice = sample.meta.regularMarketPrice\r\n\r\n    console.log(sample.timestamp.length)\r\n\r\n    return <div>\r\n        <SparkGraph\r\n            close={close}\r\n            data={data}\r\n            timestamp={timestamp}\r\n            width={500}\r\n            height={230}\r\n        />\r\n    </div>\r\n}","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\theme\\size.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\theme\\palette.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\theme\\typography.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\drawer\\navrail_drawer.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\drawer\\nav_drawer.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\drawer\\rail_item.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\app\\layout\\dashboard\\drawer\\navlist_item.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\dialog\\index.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\dialog\\dialog_title.tsx",[],["157","158"],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\components\\dialog\\dialog.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\stories\\Page.stories.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\stories\\Header.stories.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\stories\\Button.stories.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\stories\\Button.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\stories\\Header.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\client\\web\\src\\stories\\Page.tsx",[],{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","severity":1,"message":"164","line":2,"column":23,"nodeType":"165","messageId":"166","endLine":2,"endColumn":36},{"ruleId":"163","severity":1,"message":"167","line":1,"column":76,"nodeType":"165","messageId":"166","endLine":1,"endColumn":80},{"ruleId":"163","severity":1,"message":"168","line":1,"column":36,"nodeType":"165","messageId":"166","endLine":1,"endColumn":46},{"ruleId":"169","severity":1,"message":"170","line":94,"column":58,"nodeType":"171","endLine":101,"endColumn":6,"suggestions":"172"},{"ruleId":"169","severity":1,"message":"173","line":143,"column":8,"nodeType":"171","endLine":148,"endColumn":15,"suggestions":"174"},{"ruleId":"169","severity":1,"message":"175","line":388,"column":8,"nodeType":"171","endLine":388,"endColumn":28,"suggestions":"176"},{"ruleId":"169","severity":1,"message":"177","line":395,"column":8,"nodeType":"171","endLine":395,"endColumn":18,"suggestions":"178"},{"ruleId":"169","severity":1,"message":"179","line":409,"column":8,"nodeType":"171","endLine":409,"endColumn":18,"suggestions":"180"},{"ruleId":"163","severity":1,"message":"181","line":439,"column":10,"nodeType":"165","messageId":"166","endLine":439,"endColumn":19},{"ruleId":"163","severity":1,"message":"182","line":444,"column":12,"nodeType":"165","messageId":"166","endLine":444,"endColumn":21},{"ruleId":"163","severity":1,"message":"183","line":444,"column":23,"nodeType":"165","messageId":"166","endLine":444,"endColumn":35},{"ruleId":"163","severity":1,"message":"184","line":449,"column":11,"nodeType":"165","messageId":"166","endLine":449,"endColumn":23},{"ruleId":"159","replacedBy":"185"},{"ruleId":"161","replacedBy":"186"},"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"@typescript-eslint/no-unused-vars","'ValidInterval' is defined but never used.","Identifier","unusedVar","'Card' is defined but never used.","'withStyles' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'transform'. Either include it or remove the dependency array.","ArrayExpression",["189"],"React Hook useMemo has missing dependencies: 'calculateIntersection' and 'transform'. Either include them or remove the dependency array.",["190"],"React Hook useEffect has missing dependencies: 'clear' and 'render'. Either include them or remove the dependency array.",["191"],"React Hook useEffect has missing dependencies: 'onFocus' and 'pointArry'. Either include them or remove the dependency array. If 'onFocus' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["192"],"React Hook useEffect has missing dependencies: 'clear' and 'renderPointer'. Either include them or remove the dependency array.",["193"],"'fixNumber' is defined but never used.","'pointData' is assigned a value but never used.","'setPointData' is assigned a value but never used.","'currentPrice' is assigned a value but never used.",["187"],["188"],"no-global-assign","no-unsafe-negation",{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},"Update the dependencies array to be: [transform, close]",{"range":"204","text":"205"},"Update the dependencies array to be: [data, timestamp, transform, close, calculateIntersection]",{"range":"206","text":"207"},"Update the dependencies array to be: [calculatedLineData, clear, render]",{"range":"208","text":"209"},"Update the dependencies array to be: [onFocus, pointArry, posIndex]",{"range":"210","text":"211"},"Update the dependencies array to be: [clear, posIndex, renderPointer]",{"range":"212","text":"213"},[2257,2364],"[transform, close]",[3915,4006],"[data, timestamp, transform, close, calculateIntersection]",[10605,10625],"[calculatedLineData, clear, render]",[10776,10786],"[onFocus, pointArry, posIndex]",[11172,11182],"[clear, posIndex, renderPointer]"]