[{"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\index.tsx":"1","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\reportWebVitals.ts":"2","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\components\\app\\App.tsx":"3","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\components\\app\\app.tsx":"4","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\components\\app\\index.ts":"5","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\components\\button\\index.ts":"6","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\components\\button\\button.tsx":"7","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\theme\\index.ts":"8","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\theme\\globalTheme.ts":"9","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\theme\\typography.ts":"10","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\theme\\palette.ts":"11","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\theme\\size.ts":"12","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\components\\app\\root.tsx":"13"},{"size":491,"mtime":1608869568280,"results":"14","hashOfConfig":"15"},{"size":425,"mtime":499162500000,"results":"16","hashOfConfig":"15"},{"size":98,"mtime":1608866066188,"results":"17","hashOfConfig":"15"},{"size":248,"mtime":1608875463666,"results":"18","hashOfConfig":"15"},{"size":21,"mtime":1608869552982,"results":"19","hashOfConfig":"15"},{"size":24,"mtime":1608875451594,"results":"20","hashOfConfig":"15"},{"size":1904,"mtime":1608875433975,"results":"21","hashOfConfig":"15"},{"size":31,"mtime":1608869546126,"results":"22","hashOfConfig":"15"},{"size":317,"mtime":1608868111773,"results":"23","hashOfConfig":"15"},{"size":593,"mtime":1608867113006,"results":"24","hashOfConfig":"15"},{"size":1374,"mtime":1608874149511,"results":"25","hashOfConfig":"15"},{"size":179,"mtime":1608869439764,"results":"26","hashOfConfig":"15"},{"size":327,"mtime":1608875340063,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1tvc32u",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\index.tsx",[],["56","57"],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\reportWebVitals.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\components\\app\\App.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\components\\app\\app.tsx",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\components\\app\\index.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\components\\button\\index.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\components\\button\\button.tsx",["58"],"import { withStyles, Button as B, ButtonProps, PropTypes, Theme } from \"@material-ui/core\"\r\n\r\ntype CommonColors =\r\n    | 'black'\r\n    | 'white'\r\n    | 'sirius'\r\n    | 'earth'\r\n    | 'procyon'\r\n    | 'sun'\r\n    | 'canopus'\r\n    | 'achernar'\r\n    | 'altair'\r\n    | 'antares'\r\n    | 'vega'\r\n    | 'betelgeuse'\r\n    | 'aldebaran'\r\n    | 'pollux'\r\n    | 'rigel'\r\n    | 'agena'\r\n    | 'spica'\r\n    | 'mimosa';\r\n\r\nexport type ExtendedColor =\r\n    PropTypes.Color\r\n    | CommonColors\r\n    | 'accent'\r\n    | 'decorative';\r\n\r\ninterface ExtendedColorProps {\r\n    color?: ExtendedColor;\r\n}\r\n\r\ntype ExtendedButtonProps = ExtendedColorProps & Omit<ButtonProps, 'color'>;\r\n\r\nfunction getColor(color: ExtendedColor, theme: Theme): string | null {\r\n    switch (color) {\r\n        case 'inherit':\r\n        case 'primary':\r\n        case 'secondary':\r\n        case 'default':\r\n            return null\r\n        default:\r\n            return theme.palette.common[color]\r\n    }\r\n}\r\n\r\nfunction getPropColor(color: ExtendedColor): PropTypes.Color{\r\n    switch (color) {\r\n        case 'inherit':\r\n        case 'primary':\r\n        case 'secondary':\r\n        case 'default':\r\n            return color\r\n        default:\r\n            return 'default'\r\n    }\r\n}\r\n\r\nexport const Button = (props: ExtendedButtonProps) => {\r\n    const { color = \"default\", ...rest } = props\r\n\r\n    const _button = withStyles((theme) => {\r\n        const colorCode = getColor(color, theme)\r\n\r\n        if (colorCode === null || colorCode === undefined) {\r\n            return ({ root: {} })\r\n        }\r\n\r\n        return ({\r\n            root: {\r\n                color: theme.palette.getContrastText(colorCode),\r\n                backgroundColor: colorCode,\r\n                \"&:hover\": {\r\n                    backgroundColor: colorCode,\r\n                },\r\n            },\r\n        })\r\n    })(B)\r\n\r\n    return <_button color={getPropColor(color)} {...rest} />\r\n}\r\n","C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\theme\\index.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\theme\\globalTheme.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\theme\\typography.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\theme\\palette.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\theme\\size.ts",[],"C:\\Users\\Admin\\github\\mockmarket\\client\\web\\src\\components\\app\\root.tsx",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":80,"column":12,"nodeType":"65","endLine":80,"endColumn":61},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"react/jsx-pascal-case","Imported JSX component _button must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-global-assign","no-unsafe-negation"]